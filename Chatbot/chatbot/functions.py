import json
from openai import OpenAI
#import openai
from tools import tools
from tools_logic import call_function
from query_logic import build_similarity_query
from typing import List, Any
from avaliacao import registar_interacao
from dotenv import load_dotenv
import os 

#load_dotenv()
#api_key = os.getenv("OPENAI_API_KEY")
  

client_ollama = OpenAI(base_url="http://localhost:11434/v1", api_key="ollama")


"""FUN√á√ÉO PARA A GERA√á√ÉO DA RESPOSTA FINAL"""

def gen_answer(question: str, results: List[Any], cursor, embedding_function, complete_query ) -> str:
    llama_model = "llama3.2"
    #llama_model = "qwen3:4b"
   # llama_model = "gpt-4"

    system_prompt = """
    Tu √©s um assistente t√©cnico especializado em manuais de m√°quinas-ferramenta.
    Baseia-te apenas no contexto fornecido pelas fun√ß√µes  para responder de forma objetiva, t√©cnica e em portugu√™s de Portugal.

    Dica sobre as siglas utilizadas:
    - OT: Ordem de Trabalho
    - FOS: Folha de Opera√ß√£o Standard

    Tens acesso a ferramentas (fun√ß√µes) que te permitem obter informa√ß√µes adicionais:
    - Usa `get_table_info` para descrever a estrutura da base de dados documental.
    - Usa `get_machine_manual` se o utilizador pedir apenas o nome ou t√≠tulo do(s) manual(is) de uma m√°quina.
    - Usa `get_machine_n_model_manual` se o utilizador indicar nome e modelo da m√°quina, e desejar listar os manuais associados.
    - Usa `get_similarity_context` quando a pergunta for t√©cnica ou detalhada, e precisares de procurar o conte√∫do dentro dos manuais (ex: procedimentos, seguran√ßa, manuten√ß√£o, tempos, riscos).
    - Usa `handle_inappropriate_question` se a pergunta n√£o for t√©cnica ou n√£o estiver relacionada com manuais de m√°quinas-ferramenta, ou ots.
    - Usa `who_am_i` se o utilizador perguntar sobre a tua identidade ou fun√ß√£o.
    - Usa `get_ots_info` se o utilizador perguntar sobre o conteudo das **OT's** de uma m√°quina espec√≠fica, indicando nome, modelo, bd e op.
    - Usa `get_ots_info_by_intervencao` se o utilizador perguntar sobre o conteudo das **OT's** de uma dada interven√ß√£o.
    - Usa `get_fos_info` se o utilizador perguntar sobre o conteudo de uma **FOS** (Folha de Opera√ß√£o Standard) de uma m√°quina espec√≠fica, indicando nome, modelo e tipo.


    Segue esta l√≥gica de decis√£o:
    Exemplos:
    1. Pergunta: "Que manuais existem para a m√°quina EMAG?"
    ‚áí Usa: `get_machine_manual`

    2. Pergunta: "Que manuais est√£o dispon√≠veis para a EMAG VL4?"
    ‚áí Usa: `get_machine_n_model_manual`

    3. Pergunta: "Qual o intervalo de substitui√ß√£o do vidro de seguran√ßa da EMAG VL4?"
    ‚áí Usa: `get_similarity_context`

    4. Pergunta: "Quantas tabelas tem a base de dados?"
    ‚áí Usa: `get_table_info`

    5. Pergunta: "Qual √© a tua opini√£o sobre pol√≠tica?"
    ‚áí Usa: `handle_inappropriate_question` com motivo "Pergunta fora do √¢mbito t√©cnico do assistente."

    6. Pergunta: "Quem √©s tu?"
    ‚áí Usa: `who_am_i`

    7. Pergunta: "Qual a √∫ltima ot da m√°quina EMAG VL4 da BD100 OP110?"
    ‚áí Usa: `get_ots_info` com os par√¢metros: maquina_nome="EMAG", modelo="VL4", bd="BD100", op="OP110", mais_recente=True

    8. Pergunta: "Ot's relativas √† colis√£o do trackmotion?"
    ‚áí Usa: `get_ots_info_by_intervencao` com os par√¢metros: temas="colis√£o do trackmotion" 

    9. Pergunta: "Como se faz o bloqueio da m√°quina EMAG VL8-Y?"
    ‚áí Usa: `get_fos_info` com os par√¢metros: maquina_nome="EMAG", modelo="VL8-Y", tipo = "Bloqueio"

    Lembra-te: quando chamares uma fun√ß√£o, deves usar o conte√∫do retornado como **base principal da resposta final**.
    N√£o uses o conte√∫do da pergunta do utilizador como base para a resposta. E atrav√©s do conteudo da fun√ß√£o, elabora uma resposta clara e objetiva, sem repetir o conte√∫do da fun√ß√£o e sem divergir do tema.
    """


    messages = [
        {
            "role": "system",
            "content": system_prompt
        },
        {
            "role": "user",
            "content": f"Pergunta: {question}"
        }
    ]

    # 1¬™ chamada para verificar se √© necess√°ria fun√ß√£o
    response = client_ollama.chat.completions.create(
        model=llama_model,
        messages=messages,
        tools=tools,
        tool_choice="auto"
    )

    message = response.choices[0].message
    

    if message.tool_calls:
        tool_call = message.tool_calls[0]
        function_name = tool_call.function.name
        arguments = json.loads(tool_call.function.arguments)

        function_result = call_function(function_name, arguments, cursor, embedding_function, complete_query, question)

        messages.extend([
            {
                "role": "assistant",
                "content": None,
                "tool_calls": message.tool_calls
            },
            {
                "role": "tool",
                "tool_call_id": tool_call.id,
                "name": function_name,
                "content": function_result["content"]
            }
            ])
        
        # Definir a estrutura da resposta com base na fun√ß√£o
        if function_name == "get_ots_info":
            response_structure = f"""
            Elabora a resposta com base na informa√ß√£o da fun√ß√£o seguinte:

            {function_result['content']}

            Segue rigorosamente esta estrutura de resposta para OT:

            OT [n√∫mero]  
            üìÖ Datas: [data de in√≠cio] a [data de fim], no formato dd/mm/aaaa  
            üîß Interven√ß√£o: [descri√ß√£o]  
            üõ†Ô∏è Atividade: [descri√ß√£o]  
            üí¨ Coment√°rio: [ou "Sem coment√°rio."]
            üîó Link: [link]
            """

        elif function_name == "get_machine_n_model_manual" or function_name == "get_machine_manual":
            response_structure = f"""
            Elabora a resposta com base na informa√ß√£o da fun√ß√£o seguinte:

            {function_result['content']}

            Segue rigorosamente esta estrutura de resposta para Manuais:

            - T√≠tulo do manual: [nome]  
            - Resumo t√©cnico: [se aplic√°vel]
            - Link de acesso ao manual: [link]
            """

        elif function_name == "get_ots_info_by_intervencao":
            response_structure = f"""
            Elabora a resposta com base na informa√ß√£o da fun√ß√£o seguinte:

            {function_result['content']}

            Estrutura da resposta para Interven√ß√µes:
            """

        elif function_name == "get_similarity_context":
            response_structure = f"""
            Elabora a resposta com base na informa√ß√£o da fun√ß√£o seguinte:

            {function_result['content']}

            Estrutura da resposta:

            - Conte√∫do devolvido pela fun√ß√£o: [conte√∫do], deves usar este conte√∫do como base para a resposta, deves incluir um resumo das 3 declara√ß√µes fornecidas pela fun√ß√£o get_similarity_context, por√©m detalhado.
            - No final deves incluir o link para o manual: [link]
            - Se n√£o houver link, deves indicar que n√£o existe link dispon√≠vel.
            """

        elif function_name == "get_fos_info":
            response_structure = f"""
            Elabora a resposta com base na informa√ß√£o da fun√ß√£o seguinte:

            {function_result['content']}

            Estrutura da resposta para FOS:
            - Ficha de Opera√ß√£o Standard: [nome]
            - Conte√∫do: [conte√∫do], deves usar a mesmo tipo de estrutura devolvida pela fun√ß√£o, mas deves incluir um resumo desse conte√∫do, por√©m detalhado.
            - No final deves incluir o link para a FOS: [link]
            """

        elif function_name == "handle_inappropriate_question":
            response_structure = f"""
            Elabora uma resposta na qual avisas o utilizador que a pergunta n√£o √© apropriada, relevante ou profissional no contexto de manuais de m√°quinas-ferramenta:

            {function_result['content']}
            """

        else:
            response_structure = f"""
            Elabora a resposta com base na informa√ß√£o da fun√ß√£o seguinte:

            {function_result['content']}

            Mant√©m a estrutura profissional, clara e objetiva.
            """

        # Adiciona a instru√ß√£o final ao fluxo de mensagens
        messages.append({
            "role": "user",
            "content": response_structure
        })

        follow_up = client_ollama.chat.completions.create(
            model=llama_model,
            messages=messages
        )

        # avalia√ß√£o
        registar_interacao(
            pergunta=question,
            conteudo=function_result["content"],
            resposta=follow_up.choices[0].message.content,
            funcao=function_name
        )

        # Retorna a resposta final
        return follow_up.choices[0].message.content
    else:
        return message.content